from flask import request, jsonify
import subprocess
import sys
import locale

# Forcer l'encodage UTF-8 global
sys.stdin.reconfigure(encoding='utf-8')
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

def send():
    data = request.get_json()
    full_text = "Au chalet, je dormirais bien. Me coucherais tÃ´t. Pour la perdrix, pas besoin de se lever aux aurores. Sept, huit heures dâ€™un sommeil sans interruption, sans mÃªme un rÃªve ou deux, sans penser Ã , ou alors si peu, et de faÃ§on gÃ©nÃ©rale, dans le cadre global des Ã©checs dâ€™une vie dâ€™amoureux. Le sommeil lui-mÃªme Ã©tant la chose rÃªvÃ©e. Et la forÃªt dÃ©filait, noire et unie, basculant de chaque cÃ´tÃ© dans un nÃ©ant renouvelable qui rendait tangible la fuite contre laquelle luttait ma mÃ©moire. Lâ€™effet de lâ€™alcool se dÃ©cantant peu Ã  peu, je devenais moins alerte et ce nâ€™Ã©tait pas une bonne idÃ©e sur cette route sinueuse hantÃ©e par les poids lourds. Jâ€™ai baissÃ© la vitre et un filet dâ€™air glacÃ© sâ€™est engouffrÃ© Ã  lâ€™intÃ©rieur avec la prÃ©cision dâ€™une lame. Betsi pendant ce tempsâ€¯: Tu es si seul Mon ami Dans ce noir Tu es si seul Mon amour Et moi toujours Je me suis dit câ€™est un cheval, puis tout de suite non câ€™est un orignal qui traverse la route et jâ€™ai pensÃ© je vais le, ses pattes interminables et la chose Ã©tait en train de se produire. Le choc initial fut Ã©trangement tÃ©nu, compte tenu de la stature du cervidÃ© fauchÃ© Ã  la hauteur de ses grandes pattes grÃªles, et je voyais comme au ralenti se peindre un air ennuyÃ© sur les traits de la bÃªte tandis quâ€™un bref envol la soulevait pour la renverser sur le capot. Jâ€™ai eu le temps de penser Ã  un dÃ©tail que jâ€™ai tout de suite oubliÃ© mais que sur le coup jâ€™aurais voulu retenir indÃ©finiment, et lâ€™Ã©norme animal sâ€™Ã©crasait sur le pare-brise, causant un fracas si invraisemblable que jâ€™ai continuÃ© de regarder droit devant moi comme si le voyage avait dÃ» se poursuivre normalement, et câ€™est pourquoi sans doute jâ€™ai rÃ©ussi Ã  conserver la maÃ®trise du vÃ©hicule alors que lâ€™orignal repliÃ© sur lui-mÃªme prenait place Ã  cÃ´tÃ© de moi. BombardÃ© de grÃªlons de vitre, couvert dâ€™une fine poussiÃ¨re et Ã©claboussÃ© de sang chaud, jâ€™ai encore eu le temps de remarquer quâ€™il sâ€™Ã©tirait la patte arriÃ¨re en une ruade convulsive pour lÃ¢cher un bref jet de pisse puissant, en mÃªme temps quâ€™il donnait un grand coup de sabot sur le poste de radio qui sâ€™est tu instantanÃ©ment. Je roulais maintenant Ã  trente kilomÃ¨tres Ã  lâ€™heure et je ralentissais encore, ne voulant pas regarder Ã  cÃ´tÃ©. Je sentais irradier une grande chaleur amÃ¨re de la masse difforme qui venait dâ€™expirer lÃ  sur la banquetteâ€¯: un renÃ¢clement indignÃ© suivi dâ€™un gros soupir. Jâ€™ai immobilisÃ© la voiture sur le cÃ´tÃ© de la route, ne comprenant pas encore comment tout cela Ã©tait possible. Au loin jâ€™apercevais un halo, les phares dâ€™une auto venant en sens inverse. Je suis sorti pour traverser la route en diagonale sans jeter le moindre regard autour de moi, arrachant un coup de klaxon saisissant Ã  un camion qui arrivait juste derriÃ¨re. Jâ€™Ã©tais presque Ã©tonnÃ© de retrouver la riviÃ¨re Ã  mes pieds, pleine de silencieux clapotis. Je savais si peu ce que je faisais que jâ€™aurais pu me mettre Ã  nager. Il me restait tout juste assez de prÃ©sence dâ€™esprit pour constater que je tremblais violemment. Lâ€™autre automobile avait ralenti et se rapprochait doucement, comme pour ne rien dÃ©ranger. Je suis revenu sur mes pas, mâ€™avanÃ§ant Ã©bloui dans le faisceau des phares qui illuminaient toute la scÃ¨ne, ma voiture arrÃªtÃ©e dont le moteur tournait encore et, cÃ´tÃ© passager, avec ses pattes trop grandes dÃ©passant du pare-brise Ã©ventrÃ©, comme un gÃ©ant qui aurait essayÃ© de sâ€™asseoir Ã  la place dâ€™un nain, lâ€™orignal grotesquement recroquevillÃ©, son air innocent qui semblait sâ€™efforcer dâ€™expliquer comment il avait seulement eu lâ€™intention de faire un bout de chemin en ma compagnie, la langue sortie, le cou tout croche, le panache de travers dans la nuit. ; "  # Texte complet de l'histoire
    human_extract = data.get("human_text", "").strip()
    original_extract = data.get("original_text", "").strip()

    if not human_extract or not original_extract:
        return jsonify({"error": "Les deux extraits (humain et original) sont requis."}), 400

    # Construction du contexte d'analyse
    context = (
        "Vous Ãªtes un tuteur de franÃ§ais expert en analyse littÃ©raire. Voici votre mission :\n\n"
        "1. ANALYSE DES EXTRAITS :\n"
        f"TEXTE COMPLET :\n{full_text}\n\n"
        f"EXTRAIT 'HUMAIN' (Ã©lÃ©ments psychologiques/Ã©motionnels) :\n{human_extract}\n\n"
        f"EXTRAIT 'ORIGINAL' (Ã©lÃ©ments narratifs/clÃ©s) :\n{original_extract}\n\n"
        
        "2. CONSIGNES D'ANALYSE :\n"
        "a) Pour l'extrait 'Humain' :\n"
        "- VÃ©rifier si les surlignages correspondent bien Ã  des Ã©lÃ©ments psychologiques\n"
        "- Identifier les Ã©motions/motivations du personnage\n"
        "- Relier chaque Ã©lÃ©ment Ã  des passages prÃ©cis du texte\n\n"
        
        "b) Pour l'extrait 'Original' :\n"
        "- VÃ©rifier la pertinence narrative des Ã©lÃ©ments choisis\n"
        "- Identifier les procÃ©dÃ©s littÃ©raires utilisÃ©s\n"
        "- Analyser leur rÃ´le dans la construction du rÃ©cit\n\n"
        
        "3. STRUCTURE DE RÃ‰PONSE :\n"
        "âœ… Validation des bonnes rÃ©ponses\n"
        "ğŸ“Œ Ã‰lÃ©ments manquants/erreurs\n"
        "ğŸ“– Explications textuelles (avec citations)\n"
        "ğŸ’¡ Suggestions d'amÃ©lioration\n\n"
        
        "EXEMPLE DE RÃ‰PONSE :\n"
        "=== Analyse Humaine ===\n"
        "âœ… Vous avez bien identifiÃ© la solitude de Marc ('si seul mon amour')\n"
        "ğŸ“Œ Manque la dualitÃ© fatigue/alcool (ligne 22)\n"
        "ğŸ“– La 'mÃ©moire qui lutte' (l.14) montre...\n\n"
        "=== Analyse Originale ===\n"
        "âœ… Bon choix de l'image de l'orignal symbole\n"
        "ğŸ“Œ Oubli du motif de la route sinueuse\n"
        "ğŸ’¡ Ajouter la symbolique des phares (l.45)..."
    )

    # ExÃ©cution de l'analyse
    try:
        result = subprocess.run(["ollama", "run", "llama3.2", context], capture_output=True, text=True, encoding="utf-8", check=True)
        return jsonify({
            "response": result.stdout.strip(),
            "analysis": {
                "human": extract_section(result.stdout, "Analyse Humaine"),
                "original": extract_section(result.stdout, "Analyse Originale")
            }
        }), 200, {'Content-Type': 'application/json; charset=utf-8'}
    except Exception as e:
        print("Erreur lors de l'exÃ©cution de subprocess.run :", str(e))  # Log pour dÃ©bogage
        return jsonify({"error": str(e)}), 500

def extract_section(text, section_name):
    # Fonction utilitaire pour parser la rÃ©ponse structurÃ©e
    start = text.find(f"=== {section_name} ===")
    end = text.find("===", start + 1)
    return text[start:end] if start != -1 else "Section non trouvÃ©e"

def send2():
    data = request.get_json()
    print("DonnÃ©es reÃ§ues :", data)  # Log pour dÃ©bogage

    original_text = data.get("original_text", "").strip()
    human_text = data.get("human_text", "").strip()
    student_plan = data.get("form_data", {})  # Structure du plan Ã©lÃ¨ve

    if not original_text or not human_text:
        return jsonify({"error": "Les deux textes (original et humain) sont requis."}), 400

    # RÃ©ponse modÃ¨le et question d'analyse
    question_analyse = "Est-il vrai que le personnage de Marc perÃ§oit l'accident avec l'orignal comme une mÃ©taphore de sa propre vie ?"
    
    modele_reponse = {
        "these": "Oui, l'accident avec l'orignal est une mÃ©taphore de la vie de Marc, reflÃ©tant son Ã©tat d'esprit et ses Ã©checs personnels.",
        "arguments": [
            {
                "nom": "Perte de contrÃ´le",
                "sous_arguments": [
                    {
                        "texte": "L'accident est soudain et chaotique comme ses Ã©checs amoureux",
                        "preuve": "Â« Je me suis dit c'est un cheval... Â» (confusion similaire Ã  ses relations)"
                    },
                    {
                        "texte": "Tentative de garder le contrÃ´le post-impact",
                        "preuve": "Â« J'ai continuÃ© de regarder droit devant moi... Â»"
                    }
                ]
            },
            {
                "nom": "Symbolique de l'orignal",
                "sous_arguments": [
                    {
                        "texte": "L'orignal reprÃ©sente les ambitions contrariÃ©es",
                        "preuve": "Comparaison gÃ©ant/nain"
                    },
                    {
                        "texte": "RÃ©signation face au destin",
                        "preuve": "Â« air ennuyÃ© sur les traits de la bÃªte Â»"
                    }
                ]
            }
        ]
    }

    # Construction du contexte d'analyse
    context = (
        "Vous Ãªtes un expert en analyse littÃ©raire. Voici votre mission :\n\n"
        "1. QUESTION D'ANALYSE :\n"
        f"{question_analyse}\n\n"
        
        "2. TEXTE COMPLET :\n"
        f"{original_text}\n\n"
        
        "3. PLAN Ã‰LÃˆVE Ã€ ANALYSER :\n"
        f"ThÃ¨se : {student_plan.get('ideePrincipale1', '')}\n"
        "Arguments :\n"
        f"- {student_plan.get('sousArgument1_1', '')} | Preuve: {student_plan.get('preuve1_1', '')}\n"
        f"- {student_plan.get('sousArgument1_2', '')} | Preuve: {student_plan.get('preuve1_2', '')}\n"
        f"- {student_plan.get('sousArgument2_1', '')} | Preuve: {student_plan.get('preuve2_1', '')}\n"
        f"- {student_plan.get('sousArgument2_2', '')} | Preuve: {student_plan.get('preuve2_2', '')}\n\n"
        
        "4. MODÃˆLE DE RÃ‰PONSE :\n"
        f"ThÃ¨se : {modele_reponse['these']}\n"
        "Arguments modÃ¨les :\n"
        f"- {modele_reponse['arguments'][0]['nom']}: {modele_reponse['arguments'][0]['sous_arguments'][0]['texte']}\n"
        f"- {modele_reponse['arguments'][1]['nom']}: {modele_reponse['arguments'][1]['sous_arguments'][0]['texte']}\n\n"
        
        "5. CONSIGNES D'ANALYSE :\n"
        "a) Comparer structure argumentative\n"
        "b) VÃ©rifier pertinence des preuves citÃ©es\n"
        "c) Analyser la comprÃ©hension de la mÃ©taphore\n"
        "d) Proposer des amÃ©liorations structurÃ©es\n\n"
        
        "6. FORMAT DE RÃ‰PONSE ATTENDU :\n"
        "âœ… Points forts\n"
        "ğŸ“Œ Ã‰lÃ©ments manquants\n"
        "ğŸ“– Suggestions d'amÃ©lioration\n"
        "ğŸ’¡ Conseils mÃ©thodologiques"
    )

    # ExÃ©cution de l'analyse
    try:
        result = subprocess.run(["ollama", "run", "llama3.2", context], capture_output=True, text=True, encoding="utf-8", check=True)
        
        return jsonify({
            "response": result.stdout.strip(),
            "model_reponse": modele_reponse,
            "question_analyse": question_analyse
        }), 200, {'Content-Type': 'application/json; charset=utf-8'}
        
    except Exception as e:
        print("Erreur lors de l'exÃ©cution de subprocess.run :", str(e))  # Log pour dÃ©bogage
        return jsonify({"error": str(e)}), 500
